require 'tempfile'

Puppet::Type.type(:k8s_resource).provide(:kubectl) do
  commands kubectl: 'kubectl'

  def exists?
    data = kubectl_get
    return false unless data
    return true if resource[:ensure].to_s == 'absent'

    verify_content data
  end

  def create
    tempfile = Tempfile.new('k8s_resource')
    tempfile.write resource_hash.to_json

    kubectl_cmd 'apply', '-f', file.path
  ensure
    tempfile.close!
  end

  def destroy
    kubectl_cmd 'delete', resource[:kind], resource[:name]
  end

  def verify_content(content)
    # Verify that the intersection of upstream content and user-provided content is identical
    # This allows the upstream object to contain additional keys - such as those auto-generated by Kubernetes
    resource[:content] <= content
  end

  def resource_hash
    hash = resource[:content]

    hash['apiVersion'] = resource[:api_version]
    hash['kind'] = resource[:kind]

    metadata = hash['metadata'] ||= {}
    metadata['name'] = resource[:name]
    metadata['namespace'] = resource[:namespace]

    hash
  end

  def kubectl_get(check_only: false)
    data = kubectl_cmd 'get', resource[:kind], resource[:name], '--output', 'json'

    if check_only
      true
    else
      JSON.parse(data)
    end
  rescue
    false
  end

  def kubectl_cmd(*args)
    params = [
      '--namespace',
      resource[:namespace],
    ]
    if resource[:kubeconfig]
      params << '--kubeconfig'
      params << resource[:kubeconfig]
    end

    kubectl(*params, *args)
  end
end
