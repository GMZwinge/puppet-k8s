require 'tempfile'

Puppet::Type.type(:k8s_resource).provide(:kubectl) do
  commands kubectl: 'kubectl'

  attr_reader :resource_diff

  def exists?
    data = kubectl_get
    return false unless data

    diff = content_diff(data)
    return true if resource[:ensure].to_s == 'absent' || resource[:update] == :false

    diff.empty?
  end

  def create
    tempfile = Tempfile.new('k8s_resource')
    tempfile.write resource_hash.to_json

    kubectl_cmd 'apply', '-f', tempfile.path
  ensure
    tempfile.close!
  end

  def destroy
    kubectl_cmd 'delete', resource[:kind], resource[:name]
  end

  def content_diff(content, store: true)
    delete_merge = proc do |hash1, hash2|
      hash2.each_pair do |key, value|
        target_value = hash1[key]
        if target_value.is_a?(Hash) && value.is_a?(Hash) && value.any? && target_value.any?
          delete_merge.call(target_value, value)
        elsif value.is_a?(Array) && target_value.is_a?(Array) && value.any? && target_value.any?
          value.each_with_index do |x, i|
            delete_merge.call(target_value[i], x)
          end
          hash1[key] = target_value - [{}]
        else
          hash1.delete(key) if hash1.key?(key) && target_value == value
        end
        hash1.delete(key) if hash1.key?(key) && hash1[key].empty?
      end

      hash1
    end

    # Verify that the intersection of upstream content and user-provided content is identical
    # This allows the upstream object to contain additional keys - such as those auto-generated by Kubernetes
    diff = resource[:content].dup
    delete_merge.call(diff, content)

    @resource_diff = diff if store
    diff
  end

  def resource_hash
    hash = resource[:content]

    hash['apiVersion'] = resource[:api_version]
    hash['kind'] = resource[:kind]

    metadata = hash['metadata'] ||= {}
    metadata['name'] = resource[:name]
    metadata['namespace'] = resource[:namespace]

    hash
  end

  def kubectl_get
    data = kubectl_cmd 'get', resource[:kind], resource[:name], '--output', 'json'
    JSON.parse(data)
  rescue
    {}
  end

  def kubectl_cmd(*args)
    params = [
      '--namespace',
      resource[:namespace],
    ]
    if resource[:kubeconfig]
      params << '--kubeconfig'
      params << resource[:kubeconfig]
    end

    kubectl(*params, *args)
  end
end
